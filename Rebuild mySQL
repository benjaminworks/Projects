##olddb##

 

#############################################################################################################################

##Note that there are a series of procedures running to update tables by chuncks of 1000. This is due to system limitations##

#############################################################################################################################

 

 

#########################################################################

####For procedures from remote root access give privileges as follows:###

#########grant all privileges on *.* to 'root'@'%';######################

#########################################################################

##########can check what privileges exist with the following:############

##########select * from mysql.user where user='root'\G###################

#########################################################################

 

use fendb;

 

set foreign_key_checks = 0;

insert ignore into fendb.books select * from olddb.books;

truncate fendb.conventions;

insert ignore into fendb.conventions select * from olddb.conventions;

truncate fendb.depoccys;

insert ignore into fendb.depoccys select * from olddb.depoccys;

truncate fendb.dllspecs;

insert ignore into fendb.dllspecs select * from olddb.dllspecs;

truncate fendb.dlltemplatespecs;

insert ignore into fendb.dlltemplatespecs select * from olddb.dlltemplatespecs;

insert ignore into fendb.fdknamefields select * from olddb.fdknamefields;

insert ignore into fendb.fee_ratefeeditems select * from olddb.fee_ratefeeditems;

insert ignore into fendb.fee_services select * from olddb.fee_services;

truncate fendb.forwardssets;

insert ignore into fendb.forwardssets select * from olddb.forwardssets;

truncate fendb.fwdlayouts;

insert ignore into fendb.fwdlayouts select * from olddb.fwdlayouts;

truncate fendb.holidays;

insert ignore into fendb.holidays select * from olddb.holidays;

insert ignore into fendb.mandatorydlls select * from olddb.mandatorydlls;

insert ignore into fendb.names select * from olddb.names;

truncate fendb.prefs;

insert ignore into fendb.prefs select * from olddb.prefs;

truncate fendb.rates;

insert ignore into fendb.rates select * from olddb.rates;

insert ignore into fendb.reports select * from olddb.reports;

truncate fendb.scenarios;

insert ignore into fendb.scenarios select * from olddb.scenarios;

truncate fendb.sec_accessrights;

insert ignore into fendb.sec_accessrights select * from olddb.sec_accessrights;

insert ignore into fendb.sec_adminaccount select * from olddb.sec_adminaccount;

insert ignore into fendb.sec_adminpwdpolicy select * from olddb.sec_adminpwdpolicy;

insert ignore into fendb.sec_attribute select * from olddb.sec_attribute;

insert ignore into fendb.sec_securemodel select * from olddb.sec_securemodel;

update fendb.sec_securitystatus set securitystatus = 1;

insert ignore into fendb.sources select * from olddb.sources;

insert ignore into fendb.spothistory select * from olddb.spothistory;

truncate fendb.spotlayouts;

insert ignore into fendb.spotlayouts select * from olddb.spotlayouts;

truncate fendb.spots;

insert ignore into fendb.spots select * from olddb.spots;

##insert ignore into fendb.structures select * from olddb.structures; ####these are schemes

insert ignore into fendb.traders select * from olddb.traders;

truncate fendb.userbooks;

insert ignore into fendb.userbooks select * from olddb.userbooks;

truncate fendb.users;

insert ignore into fendb.users select * from olddb.users;

##insert into fendb.userstrategies select * from olddb.userstrategies; ####these are drop downs

insert ignore into fendb.volsets select * from olddb.volsets;

truncate fendb.wingvols;

insert ignore into fendb.wingvols select * from olddb.wingvols;

set foreign_key_checks = 1;

 

#########################################################

##Delete any prior messed up tables##

#########################################################

 

drop table if exists temp_tickets;

drop table if exists renumber_tickets;

drop table if exists temp_series;

drop table if exists temp_dblink;

drop table if exists temp_schedules;

drop table if exists temp_fdktickets;

drop procedure if exists update_temp_tickets;

drop procedure if exists update_schedules;

drop procedure if exists insert_temp_fdktickets;

drop procedure if exists update_temp_fdktickets;

 

#########################################################

############Temporary tickets table creation#############

#########################################################

 

create temporary table temp_tickets as select * from olddb.tickets limit 0;

 

insert into temp_tickets select * from olddb.tickets where series in

                (select series from olddb.tickets where status='Open' and instrument!='FENICS.Forex')

                and instrument!='FENICS.Forex'

    ;

 

insert ignore into temp_tickets select * from olddb.tickets where series in

                (select series from olddb.tickets

                                where status='Open'

                                and instrument='FENICS.Forex'

        and delDate > CURRENT_DATE)

    ;

               

#'For each of the databases, we can join a new ticets table prior to the mapping rename'#

 

#####################################################

##Defines the mapping from old ticket number to new##             

#####################################################            

               

set @row_number = 0;

create temporary table renumber_tickets(

                select (@row_number:=@row_number+1) as new_ticketnumber,

                                                ticketnumber,

                                                series,

                                                0 as new_series,

                                                dbtradelinknumber,

                                                0 as new_dbtradelinknumber

                from

                                temp_tickets

                order by

                                ticketnumber);

                               

CREATE UNIQUE INDEX index_name ON renumber_tickets (new_ticketnumber,ticketnumber);

       

##'Set the new head ticket number'#

create temporary table temp_series(select distinct series,0 as new_series from temp_tickets);

 

update temp_series, renumber_tickets

                set temp_series.new_series = renumber_tickets.new_ticketnumber

                where temp_series.series = renumber_tickets.ticketnumber

                and renumber_tickets.ticketnumber = renumber_tickets.series;

 

 

update renumber_tickets, temp_series

                set renumber_tickets.new_series = temp_series.new_series

                where renumber_tickets.series = temp_series.series;

   

drop table temp_series;

   

##'Set the new tradeline numbers'##

create temporary table temp_dblink(select new_ticketnumber, ticketnumber from renumber_tickets);

 

update renumber_tickets, temp_dblink

                set renumber_tickets.new_dbtradelinknumber = temp_dblink.new_ticketnumber

                where renumber_tickets.dbtradelinknumber = temp_dblink.ticketnumber;

   

drop table temp_dblink;

 

delimiter $$

create procedure update_temp_tickets()

    BEGIN

                                declare i int;

        select 0 into i;

                                tickets:loop

                                                if (select max(new_ticketnumber) from renumber_tickets) >i then

                                                                update temp_tickets

                                                                                inner join

                                                                                                (select * from renumber_tickets

                                                                                                                                group by new_ticketnumber

                                                                                                                                having new_ticketnumber between i and i+999) as narwhal

                                                                                on temp_tickets.ticketnumber = narwhal.ticketnumber

                                                                set temp_tickets.series = narwhal.new_series,

                                                                                temp_tickets.dbtradelinknumber = narwhal.new_dbtradelinknumber,

                                                                                temp_tickets.ticketnumber = narwhal.new_ticketnumber;

                                                                select i+1000 into i;

                                                else

                                                                leave tickets;

                                                end if;

                                end loop;

end$$

 

delimiter ;

               

call update_temp_tickets;

   

####################################################################################

##The temp_tickets table is now correct and can be inserted into the tickets table##

####################################################################################

 

insert into fendb.tickets select * from temp_tickets;

drop table temp_tickets;

 

##Link premiums to self##

update fendb.tickets

                set dbpremiumlinkishidden = 0,

                                dbpremiumlinknumber = TicketNumber;

 

####################################################################################

####################################################################################

 

create temporary table temp_schedules as select * from olddb.schedules limit 0;

 

insert into temp_schedules select * from olddb.schedules where ticketnumber in

                (select ticketnumber from olddb.tickets where status='Open')

    ;

               

delimiter $$

create procedure update_schedules()

    BEGIN

                                declare i int;

        select 0 into i;

                                schedules:loop

                                                if (select max(new_ticketnumber) from renumber_tickets) >i then

                                                                update temp_schedules

                                                                                inner join

                                                                                                (select * from renumber_tickets

                                                                                                                                group by new_ticketnumber

                                                                                                                                having new_ticketnumber between i and i+999) as narwhal

                                                                                on temp_schedules.ticketnumber = narwhal.ticketnumber

                                                                set temp_schedules.ticketnumber = narwhal.new_ticketnumber;

                                                                select i+1000 into i;

                                                else

                                                                leave schedules;

                                                end if;

                                end loop;

end$$

 

delimiter ;

 

call update_schedules;

               

########################################################################################

##The temp_schedules table is now correct and can be inserted into the schedules table##

########################################################################################

 

insert into fendb.schedules select * from temp_schedules;

drop table temp_schedules;

 

####################################################################################

####################################################################################

 

#drop table temp_fdktickets;

create temporary table temp_fdktickets as select * from olddb.fdkticketfields limit 0;

 

#show index from temp_fdktickets;

 

insert into temp_fdktickets

                select * from olddb.fdkticketfields

                                                where olddb.fdkticketfields.ticketnumber

                                                                in (select ticketnumber from renumber_tickets)

                                                                and olddb.fdkticketfields.ishidden=0;

 

delimiter $$

create procedure update_temp_fdktickets()

    BEGIN

                                declare i int;

        select 0 into i;

                                fdk:loop

                                                if (select max(new_ticketnumber) from renumber_tickets) >i then

                                                                update temp_fdktickets

                                                                                inner join

                                                                                                (select * from renumber_tickets

                                                                                                                                group by new_ticketnumber

                                                                                                                                having new_ticketnumber between i and i+999

                                order by new_ticketnumber) as narwhal

                                                                                on temp_fdktickets.ticketnumber = narwhal.ticketnumber

                    and ishidden=0

                                                                set temp_fdktickets.ticketnumber = narwhal.new_ticketnumber;

                                                                select i+1000 into i;

                                                else

                                                                leave fdk;

                                                end if;

                                end loop;

end$$

 

delimiter ;

 

call update_temp_fdktickets;

 

########################################################################################

##The temp_fdktickets table is now correct and can be inserted into the fdkticket table##

########################################################################################

 

insert into fendb.fdkticketfields select * from temp_fdktickets;

drop table temp_fdktickets;

drop table renumber_tickets;

 

update fendb.ticketnumber

                set initialticketnumber=1,

                                lastticketnumber = (select count(fendb.tickets.ticketnumber) from fendb.tickets)

        ;
